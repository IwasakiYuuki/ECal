mon1ex06.txt
s15023 岩崎悠紀

１．課題
FF200から機械語プログラムを置きなさい。
スタックポインタにFFF00をセットする。
レジスタER0に1122eeffをセットする。
レジスタER1にaabb4477をセットする。
レジスタER2に34567890をセットする。
レジスタER0をpushする。
レジスタER1をpushする。
レジスタER2をpushする。
レジスタER0に0をセットする。（ER0を別用途に使ったと考える）
レジスタER1に0をセットする。（ER1を別用途に使ったと考える）
レジスタER2に0をセットする。（ER2を別用途に使ったと考える）
レジスタER2にpopする。
レジスタER1にpopする。
レジスタER0にpopする。

作成したプログラム本体を報告に載せなさい。

1命令ずつ実行すると
ER0,ER1,ER2,PC（プログラムカウンタ）SP（スタックポインタ，ER7と同じ）,FFEF0からFFF00までのメモリの様子はどうなるか，
観察して，全実行結果を報告しなさい。
各 push命令実行直前のスタックポインタの値，実行直後のスタックポインタの値，
どのレジスタの内容がどこのアドレスのメモリに格納されたのか
（ここでは 4バイトの値のはずなので，何番地から何番地までのメモリに格納されたのか），
関連を考えて考察の文中に盛り込みなさい。
各pop命令実行直前のスタックポインタの値，実行直後のスタックポインタの値，
どこのメモリの内容がどこのレジスタに書き戻されたか
（ここでは4バイトの値のはずなので，何番地から何番地までのメモリから書き戻されたのか），
関連を考えて考察の文中に盛り込みなさい。

２．使用したプログラム
<ADDR>  <CODE>                <MNEMONIC> <OPERAND>
FF200   7A07000FFF00          MOV.L      #H'000FFF00:32,ER7
FF206   7A001122EEFF          MOV.L      #H'1122EEFF:32,ER0
FF20C   7A01AABB4477          MOV.L      #H'AABB4477:32,ER1
FF212   7A0234567890          MOV.L      #H'34567890:32,ER2
FF218   01006DF0              PUSH.L     ER0
FF21C   01006DF1              PUSH.L     ER1
FF220   01006DF2              PUSH.L     ER2
FF224   7A0000000000          MOV.L      #H'00000000:32,ER0
FF22A   7A0100000000          MOV.L      #H'00000000:32,ER1
FF230   7A0200000000          MOV.L      #H'00000000:32,ER2
FF236   01006D72              POP.L      ER2
FF23A   01006D71              POP.L      ER1
FF23E   01006D70              POP.L      ER0

３．調べたこと
　スタックの退避は，関数呼び出しや，マルチタスク等に用いられることがわかった．

４．考察
ーーーーーーーーーーー実行結果ーーーーーーーーーーー
: s
  PC=0FF206  CCR=80:I.......  SP=000FFF00
  ER0=00000000  ER1=00000000  ER2=00000000  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
  FF200   7A07000FFF00          MOV.L      #H'000FFF00:32,ER7
: s
  PC=0FF20C  CCR=80:I.......  SP=000FFF00
  ER0=1122EEFF  ER1=00000000  ER2=00000000  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
  FF206   7A001122EEFF          MOV.L      #H'1122EEFF:32,ER0
: s
  PC=0FF212  CCR=88:I...N...  SP=000FFF00
  ER0=1122EEFF  ER1=AABB4477  ER2=00000000  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
  FF20C   7A01AABB4477          MOV.L      #H'AABB4477:32,ER1
: s
  PC=0FF218  CCR=80:I.......  SP=000FFF00
  ER0=1122EEFF  ER1=AABB4477  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
  FF212   7A0234567890          MOV.L      #H'34567890:32,ER2
: s
  PC=0FF21C  CCR=80:I.......  SP=000FFEFC
  ER0=1122EEFF  ER1=AABB4477  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEFC
  FF218   01006DF0              PUSH.L     ER0
: d ffef0 fff00
  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
  FFEF0   FF FF DF FF 80 80 28 1A  00 0F F2 1E 11 22 EE FF   "......(......".."
  FFF00   FF                                                 "."
: s
  PC=0FF220  CCR=88:I...N...  SP=000FFEF8
  ER0=1122EEFF  ER1=AABB4477  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEF8
  FF21C   01006DF1              PUSH.L     ER1
: d ffef0 fff00
  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
  FFEF0   88 88 28 1A 00 0F F2 22  AA BB 44 77 11 22 EE FF   "..(...."..Dw.".."
  FFF00   FF                                                 "."
: s
  PC=0FF224  CCR=80:I.......  SP=000FFEF4
  ER0=1122EEFF  ER1=AABB4477  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEF4
  FF220   01006DF2              PUSH.L     ER2
: d ffef0 fff00
  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
  FFEF0   00 0F F2 26 34 56 78 90  AA BB 44 77 11 22 EE FF   "...&4Vx...Dw.".."
  FFF00   FF                                                 "."
: s
  PC=0FF22A  CCR=84:I....Z..  SP=000FFEF4
  ER0=00000000  ER1=AABB4477  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEF4
  FF224   7A0000000000          MOV.L      #H'00000000:32,ER0
: s
  PC=0FF230  CCR=84:I....Z..  SP=000FFEF4
  ER0=00000000  ER1=00000000  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEF4
  FF22A   7A0100000000          MOV.L      #H'00000000:32,ER1
: s
  PC=0FF236  CCR=84:I....Z..  SP=000FFEF4
  ER0=00000000  ER1=00000000  ER2=00000000  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEF4
  FF230   7A0200000000          MOV.L      #H'00000000:32,ER2
: s
  PC=0FF23A  CCR=80:I.......  SP=000FFEF8
  ER0=00000000  ER1=00000000  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEF8
  FF236   01006D72              POP.L      ER2
: d ffef0 fff00
  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
  FFEF0   80 80 28 1A 00 0F F2 3C  AA BB 44 77 11 22 EE FF   "..(....<..Dw.".."
  FFF00   FF                                                 "."
: s
  PC=0FF23E  CCR=88:I...N...  SP=000FFEFC
  ER0=00000000  ER1=AABB4477  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFEFC
  FF23A   01006D71              POP.L      ER1
: f ffef0 fff00
  ********  Invalid Parameter  ********
: d ffef0 fff00
  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
  FFEF0   80 80 28 1A 88 88 28 1A  00 0F F2 40 11 22 EE FF   "..(...(....@.".."
  FFF00   FF                                                 "."
: s
  PC=0FF242  CCR=80:I.......  SP=000FFF00
  ER0=1122EEFF  ER1=AABB4477  ER2=34567890  ER3=00000000
  ER4=00000000  ER5=00000000  ER6=00000000  ER7=000FFF00
  FF23E   01006D70              POP.L      ER0
: d ffef0 fff00
  <ADDR>                  <  D  A  T  A  >                     < ASCII CODE >
  FFEF0   80 80 28 1A 88 88 28 1A  80 80 28 1A 00 0F F2 44   "..(...(...(....D"
  FFF00   FF                                                 "."
ーーーーーーーーーーーーーーーーーーーーーーーーーー
　各PUSH命令ごとにスタックポインタが，命令直前の値より，命令により指定した長さ分，引かれていることがわかった．
　また，レジスタの内容は，命令直前のスタックポインタから４バイトに格納される．
　各POP命令では，PUSHとは逆に命令で指定したバイト分スタックポインタが足されているということがわかった．
　命令直前のスタックポインタから４バイト分の内容がオペランドのレジスタに格納されている．

５．まとめ
　今回の実験では，レジスタの退避という，マルチタスクや関数の呼び出しで使う重要な内容であったので，これを利用し，さらに関数などの理解を深めることができた．
